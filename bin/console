#!/usr/bin/env ruby
# frozen_string_literal: true

require 'bundler/setup'
require 'dotenv/load'
require 'awesome_print'
require 'byebug'
require 'optparse'
require 'irb'
require 'logger'

options = {
  proxy: false,
  target: :dev,
}

OptionParser.new do |opts|
  opts.on('--[no-]proxy', "Proxy TCP sockets, default: #{options[:proxy]}") do |value|
    options[:proxy] = value
  end

  opts.on('--target=NAME', "Target name (dev/prod), default: #{options[:target]}") do |value|
    case value
    when 'dev', 'prod'
      options[:target] = value.to_sym
    else
      raise ArgumentError, 'Unknown value for --target argument'
    end
  end
end.parse!

case options[:target]
when :prod
  ENV['IOVOX_URL']        ||= ENV.fetch('PROD_IOVOX_URL')
  ENV['IOVOX_USERNAME']   ||= ENV.fetch('PROD_IOVOX_USERNAME')
  ENV['IOVOX_SECURE_KEY'] ||= ENV.fetch('PROD_IOVOX_SECURE_KEY')
else
  ENV['IOVOX_URL']        ||= ENV.fetch('DEV_IOVOX_URL')
  ENV['IOVOX_USERNAME']   ||= ENV.fetch('DEV_IOVOX_USERNAME')
  ENV['IOVOX_SECURE_KEY'] ||= ENV.fetch('DEV_IOVOX_SECURE_KEY')
end

console_wrapper =
  if options[:proxy]
    require 'socksify'

    proc { |&block| Socksify.proxy('0.0.0.0', '9999', &block) }
  else
    proc { |&block| block.call }
  end

require 'iovox/all'

Iovox::Client.configuration[:logger] = Logger.new(File.join('log', "#{options[:target]}.log"))

if options[:target] == :prod
  Iovox::Client.configuration[:read_only] = true
end

console_wrapper.call do
  IRB.start(__FILE__)
end
